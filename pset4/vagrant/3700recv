#!/usr/bin/python3 -u
# Usage: ./3700recv <recv_port>
import sys
import socket
import time
import datetime
import select
import json
import struct

MSG_SIZE = 1500
TIMEOUT = 5

# things to keep updating
SEQUENCE = 0
PREVACK = 0


def updatePrevAck(next_ack):
    global PREVACK
    PREVACK = next_ack


# calculate ack as sequence number + length of data
def calcNextAck(seq, data):
    return int(seq + len(data))


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " CLIENT: " + string + "\n")


# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:
    log("Listening...")
    result = sock.recvfrom(MSG_SIZE)
    log("RECEIVED MSG")

    # If nothing is ready, we hit the timeout
    if result:
        (packet, addr) = result

        # create struct for receiving packet header data (16 bytes)
        header_struct = struct.Struct('I I ? ?')
        header = packet[:10]
        log("HEADER: " + str(header))
        # store header info in tuple
        (seq, window, ack, eof) = header_struct.unpack(header)
        # separate packet data from header
        data = packet[10:]
        # log("DATA: " + str(data))
        # converts packet into string

        try:
            # If the EOF flag is set, exit
            log("EOF: " + str(eof))
            if eof == 1:
                log("[completed]")
                sys.exit(0)

            # If there is data, we accept it and print it out
            if data:
                # If we receive data, we assume it's in-order
                if seq == PREVACK:
                    log("NEXT PACKET IN SEQUENCE HAS BEEN RECEIVED")
                    log("[recv data] " + str(seq) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
                    sys.stdout.buffer.write(data)

            # Send back an ack to the sender
            next_ack = calcNextAck(seq, data)
            # update global ACK
            updatePrevAck(next_ack)
            rec_ack = next_ack.to_bytes(4, 'big')
            log("BINARY ACK: " + str(rec_ack))

            msg = bytearray()
            msg.extend(rec_ack)
            log("MSG TO SEND BACK TO SENDER: " + str(msg))

            if sock.sendto(msg, addr) < len(msg):
                log("[error] unable to fully send packet")
            else:
                log("[send ack] " + str(msg))
        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
